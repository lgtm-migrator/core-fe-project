{"version":3,"file":"network.js","sourceRoot":"","sources":["../../src/util/network.ts"],"names":[],"mappings":";AAAA,OAAO,KAA+C,MAAM,OAAO,CAAC;AACpE,OAAO,EAAC,YAAY,EAAE,0BAA0B,EAAC,MAAM,cAAc,CAAC;AACtE,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAU1C,KAAK,CAAC,QAAQ,CAAC,iBAAiB,GAAG,UAAC,IAAI,EAAE,OAAO;IAC7C,IAAI,IAAI,EAAE;QACN,sEAAsE;QACtE,IAAM,WAAW,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,cAAc,CAAC,CAAC;QAC9C,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,UAAU,CAAC,kBAAkB,CAAC,EAAE;YAC7C,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC;SAC9B;aAAM;YACH,MAAM,IAAI,0BAA0B,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAAC;SAClF;KACJ;SAAM;QACH,OAAO,IAAI,CAAC;KACf;AACL,CAAC,CAAC;AAEF,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC3B,UAAC,QAAQ,IAAK,OAAA,QAAQ,EAAR,CAAQ,EACtB,UAAC,KAAK;IACF,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;QAC3B,IAAM,UAAU,GAAG,KAAiD,CAAC;QACrE,IAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC;QAEhD,IAAI,UAAU,CAAC,QAAQ,EAAE;YACrB,IAAM,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC9C,8EAA8E;YAC9E,IAAM,uBAAuB,GAAa,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACxD,IAAI,YAAY,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC/E,wDAAwD;gBACxD,IAAM,OAAO,GAAkB,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,EAAE,KAAI,IAAI,CAAC;gBACxD,IAAM,SAAS,GAAkB,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,SAAS,KAAI,IAAI,CAAC;gBACjE,IAAM,YAAY,GAAW,YAAY,CAAC,OAAO,IAAI,eAAe,CAAC;gBACrE,MAAM,IAAI,YAAY,CAAC,YAAY,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;aAClH;SACJ;QAED,MAAM,IAAI,0BAA0B,CAAC,6BAAsB,UAAU,CAAE,EAAE,UAAU,EAAE,UAAG,UAAU,CAAC,IAAI,IAAI,SAAS,eAAK,UAAU,CAAC,OAAO,CAAE,CAAC,CAAC;KAClJ;SAAM,IAAI,KAAK,YAAY,0BAA0B,EAAE;QACpD,MAAM,KAAK,CAAC;KACf;SAAM;QACH,MAAM,IAAI,0BAA0B,CAAC,uBAAuB,EAAE,UAAU,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC/F;AACL,CAAC,CACJ,CAAC;AAEF,MAAM,UAAgB,IAAI,CAAyC,MAAc,EAAE,IAAU,EAAE,UAA4B,EAAE,OAAgB,EAAE,WAA6C;IAA7C,4BAAA,EAAA,gBAA6C;;;;;;oBAClL,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;oBACtC,MAAM,yBAA2B,WAAW,KAAE,MAAM,QAAA,EAAE,GAAG,EAAE,OAAO,GAAC,CAAC;oBAE1E,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,QAAQ,EAAE;wBACzC,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;qBAC3B;yBAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,OAAO,EAAE;wBACpE,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;qBACzB;oBAED,MAAM,CAAC,OAAO,GAAG;wBACb,cAAc,EAAE,kBAAkB;wBAClC,MAAM,EAAE,kBAAkB;qBAC7B,CAAC;oBAEe,qBAAM,KAAK,CAAC,OAAO,CAAW,MAAM,CAAC,EAAA;;oBAAhD,QAAQ,GAAG,SAAqC;oBACtD,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;;CACxB;AAED,MAAM,UAAU,GAAG,CAAU,IAAY,EAAE,OAAgB;IACvD,IAAM,MAAM,GAAuB,EAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAC,CAAC;IAC/E,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,OAAe,EAAE,MAAc;IACrD,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,OAAO,CAAC;KAClB;IACD,IAAI,GAAG,GAAG,OAAO,CAAC;IAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,EAAa;YAAb,KAAA,aAAa,EAAZ,IAAI,QAAA,EAAE,KAAK,QAAA;QACxC,IAAM,YAAY,GAAG,kBAAkB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACf,CAAC","sourcesContent":["import axios, {AxiosError, AxiosRequestConfig, Method} from \"axios\";\nimport {APIException, NetworkConnectionException} from \"../Exception\";\nimport {parseWithDate} from \"./json-util\";\n\nexport type PathParams<T extends string> = string extends T ? {[key: string]: string | number} : T extends `${infer Start}:${infer Param}/${infer Rest}` ? {[k in Param | keyof PathParams<Rest>]: string | number} : T extends `${infer Start}:${infer Param}` ? {[k in Param]: string | number} : {};\n\nexport interface APIErrorResponse {\n    id?: string | null;\n    errorCode?: string | null;\n    message?: string | null;\n}\n\naxios.defaults.transformResponse = (data, headers) => {\n    if (data) {\n        // API response may be void, in such case, JSON.parse will throw error\n        const contentType = headers?.[\"content-type\"];\n        if (contentType?.startsWith(\"application/json\")) {\n            return parseWithDate(data);\n        } else {\n            throw new NetworkConnectionException(\"ajax() response not in JSON format\", \"\");\n        }\n    } else {\n        return data;\n    }\n};\n\naxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (axios.isAxiosError(error)) {\n            const typedError = error as AxiosError<APIErrorResponse | undefined>;\n            const requestURL = typedError.config.url || \"-\";\n\n            if (typedError.response) {\n                const responseData = typedError.response.data;\n                // Treat \"cloud\" error as Network Exception, e.g: gateway/load balancer issue,\n                const networkErrorStatusCodes: number[] = [0, 502, 504];\n                if (responseData && !networkErrorStatusCodes.includes(typedError.response.status)) {\n                    // Try to get server error message/ID/code from response\n                    const errorId: string | null = responseData?.id || null;\n                    const errorCode: string | null = responseData?.errorCode || null;\n                    const errorMessage: string = responseData.message || `[No Response]`;\n                    throw new APIException(errorMessage, typedError.response.status, requestURL, responseData, errorId, errorCode);\n                }\n            }\n\n            throw new NetworkConnectionException(`Failed to connect: ${requestURL}`, requestURL, `${typedError.code || \"UNKNOWN\"}: ${typedError.message}`);\n        } else if (error instanceof NetworkConnectionException) {\n            throw error;\n        } else {\n            throw new NetworkConnectionException(`Unknown network error`, `[No URL]`, error.toString());\n        }\n    }\n);\n\nexport async function ajax<Request, Response, Path extends string>(method: Method, path: Path, pathParams: PathParams<Path>, request: Request, extraConfig: Partial<AxiosRequestConfig> = {}): Promise<Response> {\n    const fullURL = urlParams(path, pathParams);\n    const config: AxiosRequestConfig = {...extraConfig, method, url: fullURL};\n\n    if (method === \"GET\" || method === \"DELETE\") {\n        config.params = request;\n    } else if (method === \"POST\" || method === \"PUT\" || method === \"PATCH\") {\n        config.data = request;\n    }\n\n    config.headers = {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n    };\n\n    const response = await axios.request<Response>(config);\n    return response.data;\n}\n\nexport function uri<Request>(path: string, request: Request): string {\n    const config: AxiosRequestConfig = {method: \"GET\", url: path, params: request};\n    return axios.getUri(config);\n}\n\nexport function urlParams(pattern: string, params: object): string {\n    if (!params) {\n        return pattern;\n    }\n    let url = pattern;\n    Object.entries(params).forEach(([name, value]) => {\n        const encodedValue = encodeURIComponent(value.toString());\n        url = url.replace(\":\" + name, encodedValue);\n    });\n    return url;\n}\n"]}