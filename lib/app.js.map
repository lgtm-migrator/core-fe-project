{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAC,oBAAoB,EAAU,MAAM,SAAS,CAAC;AACtD,OAAO,EAAC,eAAe,EAAE,OAAO,EAAE,WAAW,EAAuB,MAAM,OAAO,CAAC;AAClF,OAAO,oBAAsC,MAAM,YAAY,CAAC;AAChE,OAAO,EAAC,SAAS,EAAC,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAuB,UAAU,EAAC,MAAM,UAAU,CAAC;AAC1D,OAAO,EAA8B,aAAa,EAAC,MAAM,UAAU,CAAC;AACpE,OAAO,EAAS,cAAc,EAAE,WAAW,EAAQ,MAAM,WAAW,CAAC;AACrE,OAAO,EAAC,YAAY,EAAC,MAAM,mBAAmB,CAAC;AAc/C,MAAM,CAAC,IAAM,GAAG,GAAG,SAAS,EAAE,CAAC;AAC/B,MAAM,CAAC,IAAM,MAAM,GAAW,GAAG,CAAC,MAAM,CAAC;AAEzC,SAAS,mBAAmB,CAAC,QAAuB;IAChD,IAAI,gBAAgB,GAAG,OAAO,CAAC;IAC/B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;QACxC,IAAM,SAAS,GAAG,MAAM,CAAC,oCAAoC,CAAC;QAC9D,IAAI,SAAS,EAAE;YACX,gBAAgB,GAAG,SAAS,CAAC;gBACzB,6HAA6H;gBAC7H,eAAe,EAAE,CAAC,cAAc,CAAC;aACpC,CAAC,CAAC;SACN;KACJ;IACD,OAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AAED,SAAS,SAAS;IACd,IAAM,cAAc,GAAG,oBAAoB,EAAE,CAAC;IAC9C,IAAM,WAAW,GAAG,IAAI,UAAU,EAAE,CAAC;IACrC,IAAM,cAAc,GAAG,oBAAoB,CAAC;QACxC,OAAO,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,YAAY,CAAC,KAAK,EAAE,2BAA2B,EAAE,EAAC,eAAe,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC,EAAnF,CAAmF;KAChH,CAAC,CAAC;IACH,IAAM,KAAK,GAAiB,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,mBAAmB,CAAC,eAAe,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;IAC7J,cAAc,CAAC,GAAG,CAAC;;;wBACf,qBAAM,SAAS,CAAC,GAAG,EAAE,UAAW,MAAmB;;;;;oCACzC,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;yCAC5C,OAAO,EAAP,wBAAO;oCACP,sBAAA,SAAO,aAAa,8BAAC,MAAM,CAAC,IAAI,EAAE,OAAO,UAAK,MAAM,CAAC,OAAO,WAAC,EAAA;;oCAA7D,SAA6D,CAAC;;;;;qBAErE,CAAC,EAAA;;oBALF,SAKE,CAAC;;;;KACN,CAAC,CAAC;IAEH,OAAO;QACH,cAAc,gBAAA;QACd,KAAK,OAAA;QACL,cAAc,gBAAA;QACd,cAAc,EAAE,EAAE;QAClB,MAAM,EAAE,WAAW;QACnB,YAAY,EAAE,IAAI;QACjB,YAAY;;aAAK;KACrB,CAAC;AACN,CAAC","sourcesContent":["import {routerMiddleware} from \"connected-react-router\";\nimport {createBrowserHistory, History} from \"history\";\nimport {applyMiddleware, compose, createStore, Store, StoreEnhancer} from \"redux\";\nimport createSagaMiddleware, {SagaMiddleware} from \"redux-saga\";\nimport {takeEvery} from \"redux-saga/effects\";\nimport {Logger, LoggerConfig, LoggerImpl} from \"./Logger\";\nimport {ActionHandler, ErrorHandler, executeAction} from \"./module\";\nimport {Action, LOADING_ACTION, rootReducer, State} from \"./reducer\";\nimport {captureError} from \"./util/error-util\";\n\ndeclare const window: any;\n\ninterface App {\n    readonly browserHistory: History;\n    readonly store: Store<State>;\n    readonly sagaMiddleware: SagaMiddleware<any>;\n    readonly actionHandlers: {[actionType: string]: ActionHandler};\n    readonly logger: LoggerImpl;\n    loggerConfig: LoggerConfig | null;\n    errorHandler: ErrorHandler;\n}\n\nexport const app = createApp();\nexport const logger: Logger = app.logger;\n\nfunction composeWithDevTools(enhancer: StoreEnhancer): StoreEnhancer {\n    let composeEnhancers = compose;\n    if (process.env.NODE_ENV === \"development\") {\n        const extension = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n        if (extension) {\n            composeEnhancers = extension({\n                // Ref: https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md#actionsdenylist--actionsallowlist\n                actionsDenylist: [LOADING_ACTION],\n            });\n        }\n    }\n    return composeEnhancers(enhancer);\n}\n\nfunction createApp(): App {\n    const browserHistory = createBrowserHistory();\n    const eventLogger = new LoggerImpl();\n    const sagaMiddleware = createSagaMiddleware({\n        onError: (error, info) => captureError(error, \"@@framework/detached-saga\", {extraStacktrace: info.sagaStack}),\n    });\n    const store: Store<State> = createStore(rootReducer(browserHistory), composeWithDevTools(applyMiddleware(routerMiddleware(browserHistory), sagaMiddleware)));\n    sagaMiddleware.run(function* () {\n        yield takeEvery(\"*\", function* (action: Action<any>) {\n            const handler = app.actionHandlers[action.type];\n            if (handler) {\n                yield* executeAction(action.type, handler, ...action.payload);\n            }\n        });\n    });\n\n    return {\n        browserHistory,\n        store,\n        sagaMiddleware,\n        actionHandlers: {},\n        logger: eventLogger,\n        loggerConfig: null,\n        *errorHandler() {},\n    };\n}\n"]}