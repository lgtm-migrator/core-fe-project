{"version":3,"file":"SilentOnNetworkConnectionError.js","sourceRoot":"","sources":["../../src/decorator/SilentOnNetworkConnectionError.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,0BAA0B,EAAC,MAAM,cAAc,CAAC;AACxD,OAAO,EAAC,4BAA4B,EAAC,MAAM,SAAS,CAAC;AACrD,OAAO,EAAC,GAAG,EAAC,MAAM,QAAQ,CAAC;AAE3B;;;GAGG;AACH,MAAM,UAAU,8BAA8B;IAC1C,OAAO,4BAA4B,CAAC,UAAW,OAAO;;;;;;oBAE9C,sBAAA,SAAO,OAAO,EAAE,CAAA,EAAA;;oBAAhB,SAAgB,CAAC;;;;oBAEjB,IAAI,GAAC,YAAY,0BAA0B,EAAE;wBACzC,GAAG,CAAC,MAAM,CAAC,SAAS,CAChB,GAAC,EACD;4BACI,OAAO,EAAE,OAAO,CAAC,YAAY;4BAC7B,cAAc,EAAE,QAAQ;yBAC3B,EACD,OAAO,CAAC,UAAU,CACrB,CAAC;qBACL;yBAAM;wBACH,MAAM,GAAC,CAAC;qBACX;;;;;KAER,CAAC,CAAC;AACP,CAAC","sourcesContent":["import {NetworkConnectionException} from \"../Exception\";\nimport {createActionHandlerDecorator} from \"./index\";\nimport {app} from \"../app\";\n\n/**\n * Do nothing (only create a warning log) if NetworkConnectionException is thrown.\n * Mainly used for background tasks.\n */\nexport function SilentOnNetworkConnectionError() {\n    return createActionHandlerDecorator(function* (handler) {\n        try {\n            yield* handler();\n        } catch (e) {\n            if (e instanceof NetworkConnectionException) {\n                app.logger.exception(\n                    e,\n                    {\n                        payload: handler.maskedParams,\n                        process_method: \"silent\",\n                    },\n                    handler.actionName\n                );\n            } else {\n                throw e;\n            }\n        }\n    });\n}\n"]}