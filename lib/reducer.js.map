{"version":3,"file":"reducer.js","sourceRoot":"","sources":["../src/reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import {connectRouter, RouterState} from \"connected-react-router\";\nimport {Action as ReduxAction, combineReducers, Reducer} from \"redux\";\nimport {DEFAULT_IDLE_TIMEOUT} from \"./util/IdleDetector\";\nimport type {History} from \"history\";\n\n// Redux State\ninterface LoadingState {\n    [loading: string]: number;\n}\n\nexport interface IdleState {\n    timeout: number;\n    state: \"active\" | \"idle\";\n}\n\nexport interface State {\n    loading: LoadingState;\n    router: RouterState;\n    navigationPrevented: boolean;\n    app: object;\n    idle: IdleState;\n}\n\n// Redux Action\nconst SET_STATE_ACTION = \"@@framework/setState\";\n\nexport interface Action<P> extends ReduxAction<string> {\n    payload: P;\n    name?: typeof SET_STATE_ACTION;\n}\n\n// Redux Action: SetState (to update state.app)\ninterface SetStateActionPayload {\n    module: string;\n    state: any;\n}\n\n// state must be complete module state, not partial\nexport function setStateAction(module: string, state: object, type: string): Action<SetStateActionPayload> {\n    return {\n        type,\n        name: SET_STATE_ACTION,\n        payload: {module, state},\n    };\n}\n\nfunction setStateReducer(state: State[\"app\"] = {}, action: Action<any>): State[\"app\"] {\n    // Use action.name for set state action, make type specifiable to make tracking/tooling easier\n    if (action.name === SET_STATE_ACTION) {\n        const {module, state: moduleState} = action.payload as SetStateActionPayload;\n        return {...state, [module]: moduleState};\n    }\n    return state;\n}\n\n// Redux Action: Loading (to update state.loading)\ninterface LoadingActionPayload {\n    identifier: string;\n    show: boolean;\n}\n\nexport const LOADING_ACTION = \"@@framework/loading\";\n\nexport function loadingAction(show: boolean, identifier: string = \"global\"): Action<LoadingActionPayload> {\n    return {\n        type: LOADING_ACTION,\n        payload: {identifier, show},\n    };\n}\n\nfunction loadingReducer(state: LoadingState = {}, action: Action<LoadingActionPayload>): LoadingState {\n    if (action.type === LOADING_ACTION) {\n        const payload = action.payload as LoadingActionPayload;\n        const count = state[payload.identifier] || 0;\n        return {\n            ...state,\n            [payload.identifier]: count + (payload.show ? 1 : -1),\n        };\n    }\n    return state;\n}\n\n// Redux Action: Navigation Prevent (to update state.navigationPrevented)\ninterface NavigationPreventionActionPayload {\n    isPrevented: boolean;\n}\n\nconst NAVIGATION_PREVENTION_ACTION = \"@@framework/navigation-prevention\";\n\nexport function navigationPreventionAction(isPrevented: boolean): Action<NavigationPreventionActionPayload> {\n    return {\n        type: NAVIGATION_PREVENTION_ACTION,\n        payload: {isPrevented},\n    };\n}\n\nfunction navigationPreventionReducer(state: boolean = false, action: Action<NavigationPreventionActionPayload>): boolean {\n    if (action.type === NAVIGATION_PREVENTION_ACTION) {\n        const payload = action.payload as NavigationPreventionActionPayload;\n        return payload.isPrevented;\n    }\n    return state;\n}\n\n// Redux Action: Idle state  (to update state.idle)\ninterface IdleStateActionPayload {\n    state: \"active\" | \"idle\";\n}\n\nexport const IDLE_STATE_ACTION = \"@@framework/idle-state\";\n\nexport function idleStateActions(state: \"active\" | \"idle\"): Action<IdleStateActionPayload> {\n    return {\n        type: IDLE_STATE_ACTION,\n        payload: {state},\n    };\n}\n\n// Redux Action: Idle timeout (to update state.timeout)\ninterface IdleTimeoutActionPayload {\n    timeout: IdleState[\"timeout\"];\n}\n\nconst IDLE_TIMEOUT_ACTION = \"@@framework/idle-timeout\";\n\nexport function idleTimeoutActions(timeout: number): Action<IdleTimeoutActionPayload> {\n    return {\n        type: IDLE_TIMEOUT_ACTION,\n        payload: {timeout},\n    };\n}\n\nexport function idleReducer(state: IdleState = {timeout: DEFAULT_IDLE_TIMEOUT, state: \"active\"}, action: Action<IdleStateActionPayload | IdleTimeoutActionPayload>): IdleState {\n    if (action.type === IDLE_STATE_ACTION) {\n        const payload = action.payload as IdleStateActionPayload;\n        return {...state, state: payload.state};\n    } else if (action.type === IDLE_TIMEOUT_ACTION) {\n        const payload = action.payload as IdleTimeoutActionPayload;\n        return {...state, timeout: payload.timeout};\n    } else {\n        return state;\n    }\n}\n\n// Root Reducer\nexport function rootReducer(history: History): Reducer<State> {\n    return combineReducers<State>({\n        router: connectRouter(history),\n        loading: loadingReducer,\n        app: setStateReducer,\n        navigationPrevented: navigationPreventionReducer,\n        idle: idleReducer,\n    });\n}\n\n// Helper function, to determine if show loading\nexport function showLoading(state: State, identifier: string = \"global\") {\n    return state.loading[identifier] > 0;\n}\n"]}