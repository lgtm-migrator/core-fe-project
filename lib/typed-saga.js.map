{"version":3,"file":"typed-saga.js","sourceRoot":"","sources":["../src/typed-saga.ts"],"names":[],"mappings":";AAAA,OAAO,EAAuB,IAAI,IAAI,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,MAAM,EAAE,KAAK,EAAE,GAAG,EAAC,MAAM,oBAAoB,CAAC;AAQ5H,MAAM,UAAW,IAAI,CAAwB,EAAwB;;IAAE,cAAa;iBAAb,qBAAa,EAAb,IAAa;QAAb,6BAAa;;;;oBACzE,qBAAM,OAAO,8BAAC,EAAE,UAAK,IAAI,YAAC;oBAAjC,sBAAO,SAA0B,EAAC;;;CACrC;AAQD,MAAM,UAAW,IAAI,CAAC,OAAY;;;oBACvB,qBAAM,OAAO,CAAC,OAAO,CAAC,EAAA;oBAA7B,sBAAO,SAAsB,EAAC;;;CACjC;AAQD,MAAM,UAAW,GAAG,CAAC,OAAY;;;oBACtB,qBAAM,MAAM,CAAC,OAAO,CAAC,EAAA;oBAA5B,sBAAO,SAAqB,EAAC;;;CAChC;AAED,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC","sourcesContent":["import {StrictEffect, Effect, call as rawCall, race as rawRace, spawn, all as rawAll, delay, put} from \"redux-saga/effects\";\n\ntype SagaGeneratorWithReturn<RT> = Generator<Effect, RT, any>;\n\ntype UnwrapReturnType<R> = R extends SagaGeneratorWithReturn<infer RT> ? RT : R extends Promise<infer PromiseValue> ? PromiseValue : R;\n\nexport type SagaGenerator = Generator<StrictEffect>;\n\nexport function* call<Args extends any[], R>(fn: (...args: Args) => R, ...args: Args): SagaGeneratorWithReturn<UnwrapReturnType<R>> {\n    return yield rawCall(fn, ...args);\n}\n\nexport function race<T extends Record<string, unknown>>(effects: T): SagaGeneratorWithReturn<{[P in keyof T]?: UnwrapReturnType<T[P]>}>;\nexport function race<T1, T2>(effects: [T1, T2]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>?, UnwrapReturnType<T2>?]>;\nexport function race<T1, T2, T3>(effects: [T1, T2, T3]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>?, UnwrapReturnType<T2>?, UnwrapReturnType<T3>?]>;\nexport function race<T1, T2, T3, T4>(effects: [T1, T2, T3, T4]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>?, UnwrapReturnType<T2>?, UnwrapReturnType<T3>?, UnwrapReturnType<T4>?]>;\nexport function race<T1, T2, T3, T4, T5>(effects: [T1, T2, T3, T4, T5]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>?, UnwrapReturnType<T2>?, UnwrapReturnType<T3>?, UnwrapReturnType<T4>?, UnwrapReturnType<T5>?]>;\nexport function race<T>(effects: T[]): SagaGeneratorWithReturn<Array<UnwrapReturnType<T> | undefined>>;\nexport function* race(effects: any): any {\n    return yield rawRace(effects);\n}\n\nexport function all<T extends Record<string, unknown>>(effects: T): SagaGeneratorWithReturn<{[P in keyof T]: UnwrapReturnType<T[P]>}>;\nexport function all<T1, T2>(effects: [T1, T2]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>, UnwrapReturnType<T2>]>;\nexport function all<T1, T2, T3>(effects: [T1, T2, T3]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>, UnwrapReturnType<T2>, UnwrapReturnType<T3>]>;\nexport function all<T1, T2, T3, T4>(effects: [T1, T2, T3, T4]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>, UnwrapReturnType<T2>, UnwrapReturnType<T3>, UnwrapReturnType<T4>]>;\nexport function all<T1, T2, T3, T4, T5>(effects: [T1, T2, T3, T4, T5]): SagaGeneratorWithReturn<[UnwrapReturnType<T1>, UnwrapReturnType<T2>, UnwrapReturnType<T3>, UnwrapReturnType<T4>, UnwrapReturnType<T5>]>;\nexport function all<T>(effects: T[]): SagaGeneratorWithReturn<Array<UnwrapReturnType<T>>>;\nexport function* all(effects: any): any {\n    return yield rawAll(effects);\n}\n\nexport {spawn, delay, put};\n"]}